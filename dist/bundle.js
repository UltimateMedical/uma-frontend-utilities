module.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=function(){function t(){this.extensions=[],this.parse=this.parse.bind(this),this.extend=this.extend.bind(this)}return t.prototype.parse=function(t){var e,n,r,o,i=this;return t?(n=RegExp(/{{\s*(.*?)\s*}}/g),(r=t.match(n))&&r.length&&r.length>0&&r.forEach((function(n){o=n,n=(n="{"+n+"}").replace(/&#8216;|&#8217;/g,"'").replace(/&#8220;|&#8221;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/{{/,"").replace(/}}/,"");try{e=JSON.parse(n)}catch(e){return t}void 0!==e.function&&i.extensions.forEach((function(r){t=r.parse(t,e,n,o)}))})),t):t},t.prototype.extend=function(t){this.extensions.push(t)},t}(),o=function(){function t(){this.bag={}}return t.prototype.get=function(t){return void 0!==typeof this.bag[t]?this.bag[t]:null},t.prototype.set=function(t,e){this.bag[t]=e},t}(),i=new(function(){function t(){this.gaTargetCollections=[],this.DEBUG=!1,this.gaTargetConfigurations=[],this.observeForMutations=null,this.gaTargetCollections=[],this.init=this.init.bind(this),this.observeParentWrapper=this.observeParentWrapper.bind(this),this.parentWrapperObserver=this.parentWrapperObserver.bind(this),this.onParentWrapperUpdate=this.onParentWrapperUpdate.bind(this),this.createGaTargetCollection=this.createGaTargetCollection.bind(this),this.createGaTargetInstance=this.createGaTargetInstance.bind(this),this.addEventListeners=this.addEventListeners.bind(this),this.getNodeGaLabel=this.getNodeGaLabel.bind(this)}return t.prototype.init=function(t){var e=this;t&&Object.keys(t).forEach((function(n){e[n]=t[n]})),this.gaTargetCollections=this.gaTargetConfigurations.map((function(t){return e.createGaTargetCollection(t)})),this.observeForMutations&&this.observeParentWrapper()},t.prototype.observeParentWrapper=function(){this.parentWrapperObserver().observe(this.observeForMutations,{childList:!0})},t.prototype.parentWrapperObserver=function(){return new MutationObserver(this.onParentWrapperUpdate)},t.prototype.onParentWrapperUpdate=function(t,e){console.log("mutation: ",t)},t.prototype.createGaTargetCollection=function(t){var e,n,r=this;return e=Array.prototype.slice.call(document.querySelectorAll(t.selector)),{selector:t.selector,firingEvents:t.firingEvents,argsForGa:t.argsForGa,reselectOnMutation:t.reselectOnMutation||!1,gaTargets:e.map((function(e){return n=r.createGaTargetInstance(e,t),r.addEventListeners(n),n}))}},t.prototype.createGaTargetInstance=function(t,e){var n={node:t,firingEvents:e.firingEvents,gaCommand:e.argsForGa[0],gaType:e.argsForGa[1],gaCategory:e.argsForGa[2],gaAction:e.argsForGa[3],gaLabel:e.argsForGa[4],getArgsForGa:function(){return[n.gaCommand,n.gaType,n.gaCategory,n.gaAction,n.gaLabel]}};return n.gaLabel=this.getNodeGaLabel(n),this.addEventListeners(n),n},t.prototype.addEventListeners=function(t){var e=this,n=function(){e.DEBUG?console.log("gaTarget: ",t):window.ga.apply(window,t.getArgsForGa())};t.firingEvents.forEach((function(e){t.node.addEventListener(e,n)}))},t.prototype.getNodeGaLabel=function(t){var e,n=t.node.getAttribute("ga-label");return n&&(e=t.gaLabel.replace(/{{\s*label\s*}}/gi,n)),e},t}()),a=function(){function t(){this.footnotes=[],this.globalFootnotesStorage={},this.count=this.count.bind(this),this.add=this.add.bind(this),this.addGlobal=this.addGlobal.bind(this),this.setGlobalFootnotes=this.setGlobalFootnotes.bind(this),this.getFootnotes=this.getFootnotes.bind(this)}return t.prototype.count=function(){return this.footnotes.length},t.prototype.add=function(t){var e=this.count()+1;this.footnotes.push({id:e,text:t})},t.prototype.setGlobalFootnotes=function(t){this.globalFootnotesStorage=t},t.prototype.addGlobal=function(t){t=t.toLowerCase(),this.globalFootnotesStorage.hasOwnProperty(t)&&this.add(this.globalFootnotesStorage[t])},t.prototype.getFootnotes=function(){return this.footnotes.length>0?this.footnotes:null},t}();n.d(e,"ShortcodeParser",(function(){return r})),n.d(e,"Container",(function(){return o})),n.d(e,"gaTracker",(function(){return i})),n.d(e,"Footnotes",(function(){return a}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,