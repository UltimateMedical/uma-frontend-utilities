!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var o=new(function(){function t(){this.gaTargetCollections=[],this.DEBUG=!1,this.gaTargetConfigurations=[],this.observeForMutations=null,this.gaTargetCollections=[],this.init=this.init.bind(this),this.observeParentWrapper=this.observeParentWrapper.bind(this),this.parentWrapperObserver=this.parentWrapperObserver.bind(this),this.onParentWrapperUpdate=this.onParentWrapperUpdate.bind(this),this.createGaTargetCollection=this.createGaTargetCollection.bind(this),this.createGaTargetInstance=this.createGaTargetInstance.bind(this),this.addEventListeners=this.addEventListeners.bind(this),this.getNodeGaLabel=this.getNodeGaLabel.bind(this)}return t.prototype.init=function(t){var e,n=this;t&&Object.keys(t).forEach((function(e){n[e]=t[e]})),this.gaTargetConfigurations.forEach((function(t){(e=n.createGaTargetCollection(t)).gaTargets.length&&n.gaTargetCollections.push(e)})),this.observeForMutations&&this.observeParentWrapper()},t.prototype.observeParentWrapper=function(){this.parentWrapperObserver().observe(this.observeForMutations,{childList:!0})},t.prototype.parentWrapperObserver=function(){return new MutationObserver(this.onParentWrapperUpdate)},t.prototype.onParentWrapperUpdate=function(t,e){var n=this;t.forEach((function(t){t.addedNodes.forEach((function(t){n.gaTargetConfigurations.forEach((function(e){e.fetchOnMutation&&document.querySelector(e.selector)===t&&n.gaTargetCollections.push(n.createGaTargetCollection(e))}))}))}))},t.prototype.createGaTargetCollection=function(t){var e,n=this;return e=Array.prototype.slice.call(document.querySelectorAll(t.selector)),{selector:t.selector,firingEvents:t.firingEvents,argsForGa:t.argsForGa,fetchOnMutation:t.fetchOnMutation||!1,gaTargets:e.map((function(e){return n.createGaTargetInstance(e,t)}))}},t.prototype.createGaTargetInstance=function(t,e){var n={node:t,firingEvents:e.firingEvents,gaCommand:e.argsForGa[0],gaType:e.argsForGa[1],gaCategory:e.argsForGa[2],gaAction:e.argsForGa[3],gaLabel:e.argsForGa[4],getArgsForGa:function(){return[n.gaCommand,n.gaType,n.gaCategory,n.gaAction,n.gaLabel]}};return n.gaLabel=this.getNodeGaLabel(n),this.addEventListeners(n),n},t.prototype.addEventListeners=function(t){var e=this,n=function(){e.DEBUG?console.log("gaTarget: ",t.getArgsForGa()):window.ga.apply(window,t.getArgsForGa())};t.firingEvents.forEach((function(e){t.node.addEventListener(e,n)}))},t.prototype.getNodeGaLabel=function(t){var e=t.node.getAttribute("ga-label");return e?t.gaLabel.replace(/{{\s*label\s*}}/gi,e):t.gaLabel.replace(/{{\s*label\s*}}/gi,"")},t}()),r=function(){function t(){this.extensions=[],this.parse=this.parse.bind(this),this.extend=this.extend.bind(this)}return t.prototype.parse=function(t){var e,n,o,r,a=this;return t?(n=RegExp(/{{\s*(.*?)\s*}}/g),(o=t.match(n))&&o.length&&o.length>0&&o.forEach((function(n){r=n,n=(n="{"+n+"}").replace(/&#8216;|&#8217;/g,"'").replace(/&#8220;|&#8221;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/{{/,"").replace(/}}/,"");try{e=JSON.parse(n)}catch(e){return t}void 0!==e.function&&a.extensions.forEach((function(o){t=o.parse(t,e,n,r)}))})),t):t},t.prototype.extend=function(t){this.extensions.push(t)},t}(),a=function(){function t(){this.bag={}}return t.prototype.get=function(t){return void 0!==typeof this.bag[t]?this.bag[t]:null},t.prototype.set=function(t,e){this.bag[t]=e},t}(),i=function(){function t(){this.footnotes=[],this.globalFootnotesStorage={},this.count=this.count.bind(this),this.add=this.add.bind(this),this.addGlobal=this.addGlobal.bind(this),this.setGlobalFootnotes=this.setGlobalFootnotes.bind(this),this.getFootnotes=this.getFootnotes.bind(this)}return t.prototype.count=function(){return this.footnotes.length},t.prototype.add=function(t){var e=this.count()+1;this.footnotes.push({id:e,text:t})},t.prototype.setGlobalFootnotes=function(t){this.globalFootnotesStorage=t},t.prototype.addGlobal=function(t){t=t.toLowerCase(),this.globalFootnotesStorage.hasOwnProperty(t)&&this.add(this.globalFootnotesStorage[t])},t.prototype.getFootnotes=function(){return this.footnotes.length>0?this.footnotes:null},t}();n.d(e,"ShortcodeParser",(function(){return r})),n.d(e,"Container",(function(){return a})),n.d(e,"gaTracker",(function(){return o})),n.d(e,"Footnotes",(function(){return i}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,