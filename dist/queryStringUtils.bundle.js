!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n=function(){function e(){}return e.getQueryObject=function(e){return"?"===e.charAt(0)&&(e=e.substr(1)),e.split("&").filter((function(e){return e.length>0})).map((function(e){var t,r={key:"",value:""};return t=e.split("="),r.key=t[0],r.value=t[1]||"",r}))},e}(),i=function(){function e(){this.queryObjects=[],this.builtQueryString="",this.configs=[],this.overrideQueryString="",this.overrideQueryObjects=[]}return e.prototype.withConfig=function(e){return this.configs=e,this},e.prototype.withOverrides=function(e){return this.overrideQueryString=e,this.overrideQueryObjects=n.getQueryObject(e),this},e.prototype.getString=function(){return this.builtQueryString},e.prototype.getObjects=function(){return this.queryObjects},e.prototype.build=function(){var e=this;return this.queryObjects=this.configs.map((function(t){return e.createQueryObject(t)})).filter((function(e){return e})),this.builtQueryString=this.createQueryString(this.queryObjects),this},e.prototype.createQueryString=function(e){return e.reduce((function(e,t){return t.value?e+(t.key+"=")+t.value+"&":e+(t.key+"&")}),"?").slice(0,-1)},e.prototype.createQueryObject=function(e){var t={primary:!0,default:!1};"boolean"==typeof e.omitKeyWithFalsyValue?(t.primary=e.omitKeyWithFalsyValue,t.default=e.omitKeyWithFalsyValue):t=Object.assign(t,e.omitKeyWithFalsyValue);var r=e.overrideSearch||null,n=e.paramName,i=e.primaryValue,u=e.defaultValue,o=!1,c={key:encodeURI(n.trim()),value:""};return r&&this.overrideQueryObjects.forEach((function(e){e.key.match(r)&&(c.value=e.value,o=!0)})),o||(t.primary&&this.isFalsy(i)?i=!1:(i=void 0!==i?String(i):"",c.value=encodeURI(i.trim()),i=!0)),o||i||(t.default&&this.isFalsy(u)?u=!1:(u=void 0!==u?String(u):"",c.value=encodeURI(u.trim()),u=!0)),o||i||u?c:null},e.prototype.isFalsy=function(e){return"undefined"===e||null===e||0===e||!1===e||""===e||void 0===e},e}(),u=function(){function e(){}return e.createBuilder=function(){return new i},e}();r.d(t,"QueryStringParser",(function(){return n})),r.d(t,"QueryStringBuilder",(function(){return i})),r.d(t,"QueryStringifier",(function(){return u}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9zcmMvcXVlcnktc3RyaW5nLXV0aWxzL1F1ZXJ5U3RyaW5nUGFyc2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9xdWVyeS1zdHJpbmctdXRpbHMvUXVlcnlTdHJpbmdCdWlsZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9xdWVyeS1zdHJpbmctdXRpbHMvaW5kZXguanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiYSIsImkiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnZXRRdWVyeU9iamVjdCIsInF1ZXJ5U3RyaW5nIiwiY2hhckF0Iiwic3Vic3RyIiwic3BsaXQiLCJmaWx0ZXIiLCJwYXJhbVN0cmluZyIsImxlbmd0aCIsIm1hcCIsInBhcmFtU3RyaW5ncyIsInBhcmFtT2JqZWN0IiwidGhpcyIsInF1ZXJ5T2JqZWN0cyIsImJ1aWx0UXVlcnlTdHJpbmciLCJjb25maWdzIiwib3ZlcnJpZGVRdWVyeVN0cmluZyIsIm92ZXJyaWRlUXVlcnlPYmplY3RzIiwid2l0aENvbmZpZyIsIndpdGhPdmVycmlkZXMiLCJnZXRTdHJpbmciLCJnZXRPYmplY3RzIiwiYnVpbGQiLCJjb25maWciLCJjcmVhdGVRdWVyeU9iamVjdCIsInF1ZXJ5T2JqZWN0IiwiY3JlYXRlUXVlcnlTdHJpbmciLCJyZWR1Y2UiLCJhY2MiLCJjdXIiLCJzbGljZSIsIm9taXRLZXlXaXRoRmFsc3lWYWx1ZSIsInByaW1hcnkiLCJkZWZhdWx0IiwiYXNzaWduIiwicmVnZXgiLCJvdmVycmlkZVNlYXJjaCIsInBhcmFtTmFtZSIsInByaW1hcnlWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsInVybE92ZXJyaWRlIiwicGFyYW0iLCJlbmNvZGVVUkkiLCJ0cmltIiwiZm9yRWFjaCIsIm1hdGNoIiwiaXNGYWxzeSIsIlN0cmluZyIsImNyZWF0ZUJ1aWxkZXIiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUNoRCxHQUFzQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxTQUNiLEdBQXFCLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsT0FDUCxDQUNKLElBQUlLLEVBQUlMLElBQ1IsSUFBSSxJQUFJTSxLQUFLRCxHQUF1QixpQkFBWkosUUFBdUJBLFFBQVVGLEdBQU1PLEdBQUtELEVBQUVDLElBUHhFLENBU0dDLFFBQVEsV0FDWCxPLFlDVEUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVVQsUUFHbkMsSUFBSUMsRUFBU00sRUFBaUJFLEdBQVksQ0FDekNKLEVBQUdJLEVBQ0hDLEdBQUcsRUFDSFYsUUFBUyxJQVVWLE9BTkFXLEVBQVFGLEdBQVVHLEtBQUtYLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNRLEdBRy9EUCxFQUFPUyxHQUFJLEVBR0pULEVBQU9ELFFBMERmLE9BckRBUSxFQUFvQkssRUFBSUYsRUFHeEJILEVBQW9CTSxFQUFJUCxFQUd4QkMsRUFBb0JPLEVBQUksU0FBU2YsRUFBU2dCLEVBQU1DLEdBQzNDVCxFQUFvQlUsRUFBRWxCLEVBQVNnQixJQUNsQ0csT0FBT0MsZUFBZXBCLEVBQVNnQixFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVULEVBQW9CZSxFQUFJLFNBQVN2QixHQUNYLG9CQUFYd0IsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlcEIsRUFBU3dCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZXBCLEVBQVMsYUFBYyxDQUFFMEIsT0FBTyxLQVF2RGxCLEVBQW9CbUIsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFsQixFQUFvQmtCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBdkIsRUFBb0JlLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPbEIsRUFBb0JPLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ0QixFQUFvQjBCLEVBQUksU0FBU2pDLEdBQ2hDLElBQUlnQixFQUFTaEIsR0FBVUEsRUFBTzRCLFdBQzdCLFdBQXdCLE9BQU81QixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBTyxFQUFvQk8sRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlQsRUFBb0JVLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHNUIsRUFBb0IrQixFQUFJLEdBSWpCL0IsRUFBb0JBLEVBQW9CZ0MsRUFBSSxHLHNDQ2hGckQsSUE0QmUsRUE1QmYseUJBMEJBLE9BeEJnQixFQUFBQyxlQUFkLFNBQTZCQyxHQXFCM0IsTUFoQjZCLE1BQTFCQSxFQUFZQyxPQUFPLEtBQ3BCRCxFQUFjQSxFQUFZRSxPQUFPLElBR2JGLEVBQVlHLE1BQU0sS0FBS0MsUUFBTyxTQUFBQyxHQUFlLE9BQUFBLEVBQVlDLE9BQVMsS0FDOUNDLEtBQUksU0FBQUYsR0FFNUMsSUFBSUcsRUFDSkMsRUFBeUMsQ0FBRW5CLElBQUksR0FBSU4sTUFBTSxJQUt6RCxPQUhBd0IsRUFBZUgsRUFBWUYsTUFBTSxLQUNqQ00sRUFBWW5CLElBQU1rQixFQUFhLEdBQy9CQyxFQUFZekIsTUFBUXdCLEVBQWEsSUFBTSxHQUNoQ0MsTUFNYixFQTFCQSxHQ0NBLGFBUUUsYUFDRUMsS0FBS0MsYUFBZSxHQUNwQkQsS0FBS0UsaUJBQW1CLEdBQ3hCRixLQUFLRyxRQUFVLEdBQ2ZILEtBQUtJLG9CQUFzQixHQUMzQkosS0FBS0sscUJBQXVCLEdBd0hoQyxPQXJIUyxZQUFBQyxXQUFQLFNBQWtCSCxHQUVoQixPQURBSCxLQUFLRyxRQUFVQSxFQUNSSCxNQUdGLFlBQUFPLGNBQVAsU0FBcUJILEdBR25CLE9BRkFKLEtBQUtJLG9CQUFzQkEsRUFDM0JKLEtBQUtLLHFCQUF1QixFQUFrQmhCLGVBQWVlLEdBQ3RESixNQUdGLFlBQUFRLFVBQVAsV0FDRSxPQUFPUixLQUFLRSxrQkFHUCxZQUFBTyxXQUFQLFdBQ0UsT0FBT1QsS0FBS0MsY0FHUCxZQUFBUyxNQUFQLHNCQVFFLE9BTkFWLEtBQUtDLGFBQWVELEtBQUtHLFFBQVFOLEtBQUksU0FBQWMsR0FDbkMsT0FBTyxFQUFLQyxrQkFBa0JELE1BQzdCakIsUUFBTyxTQUFBbUIsR0FBZSxPQUFBQSxLQUV6QmIsS0FBS0UsaUJBQW1CRixLQUFLYyxrQkFBa0JkLEtBQUtDLGNBRTdDRCxNQUlDLFlBQUFjLGtCQUFWLFNBQTRCYixHQWE1QixPQVRnQkEsRUFBYWMsUUFBTyxTQUFDQyxFQUFLQyxHQUN0QyxPQUFJQSxFQUFJM0MsTUFHSjBDLEdBQVNDLEVBQUlyQyxJQUFHLEtBQUlxQyxFQUFJM0MsTUFBSyxJQUZ4QjBDLEdBQVNDLEVBQUlyQyxJQUFHLE9BRzFCLEtBRXlCc0MsTUFBTSxHQUFJLElBSzVCLFlBQUFOLGtCQUFWLFNBQTRCRCxHQUUxQixJQUFJUSxFQUF3QixDQUFFQyxTQUFTLEVBQU1DLFNBQVMsR0FDWCxrQkFBakNWLEVBQU9RLHVCQUNmQSxFQUFzQkMsUUFBVVQsRUFBT1Esc0JBQ3ZDQSxFQUFzQkUsUUFBVVYsRUFBT1EsdUJBR3ZDQSxFQUF3QnBELE9BQU91RCxPQUFPSCxFQUF1QlIsRUFBT1EsdUJBR3RFLElBQUlJLEVBQVFaLEVBQU9hLGdCQUFrQixLQUNyQ0MsRUFBWWQsRUFBT2MsVUFDZkMsRUFBZWYsRUFBT2UsYUFDdEJDLEVBQWVoQixFQUFPZ0IsYUFDMUJDLEdBQWMsRUFDZEMsRUFBUSxDQUNQakQsSUFBS2tELFVBQVVMLEVBQVVNLFFBQ3BCekQsTUFBTyxJQWtDZixPQS9CR2lELEdBQ0Z2QixLQUFLSyxxQkFBcUIyQixTQUFRLFNBQUFuQixHQUM5QkEsRUFBWWpDLElBQUlxRCxNQUFNVixLQUN4Qk0sRUFBTXZELE1BQVF1QyxFQUFZdkMsTUFDMUJzRCxHQUFjLE1BS2JBLElBQ0dULEVBQXNCQyxTQUFXcEIsS0FBS2tDLFFBQVFSLEdBQy9DQSxHQUFlLEdBR2ZBLE9BQXVDLElBQWpCQSxFQUErQlMsT0FBT1QsR0FBZ0IsR0FDNUVHLEVBQU12RCxNQUFRd0QsVUFBVUosRUFBYUssUUFDckNMLEdBQWUsSUFJakJFLEdBQWdCRixJQUNiUCxFQUFzQkUsU0FBV3JCLEtBQUtrQyxRQUFRUCxHQUMvQ0EsR0FBZSxHQUdmQSxPQUF1QyxJQUFqQkEsRUFBK0JRLE9BQU9SLEdBQWdCLEdBQzVFRSxFQUFNdkQsTUFBUXdELFVBQVVILEVBQWFJLFFBQ3JDSixHQUFlLElBSWxCQyxHQUFlRixHQUFnQkMsRUFDMUJFLEVBR0QsTUFHQSxZQUFBSyxRQUFQLFNBQWU1RCxHQUNiLE1BQ1ksY0FBVkEsR0FBbUMsT0FBVkEsR0FDZixJQUFWQSxJQUF5QixJQUFWQSxHQUE2QixLQUFWQSxRQUNqQixJQUFWQSxHQU9iLEVBcklBLEdBdUlBLDJCQVlBLE9BSlMsRUFBQThELGNBQVAsV0FDRSxPQUFPLElBQUksR0FHZixFQVpBLEdDMUlBIiwiZmlsZSI6InF1ZXJ5U3RyaW5nVXRpbHMuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0IHsgUXVlcnlTdHJpbmdPYmplY3QgIH0gZnJvbSAnLi9jb250cmFjdHMnO1xuXG5jbGFzcyBRdWVyeVN0cmluZ1BhcnNlciB7XG5cbiAgcHVibGljIHN0YXRpYyBnZXRRdWVyeU9iamVjdChxdWVyeVN0cmluZzpzdHJpbmcpOiBBcnJheTxRdWVyeVN0cmluZ09iamVjdD4ge1xuXG4gICAgbGV0IGFycmF5T2ZQYXJhbVN0cmluZ3M6QXJyYXk8c3RyaW5nPiA9IFtdLFxuICAgICAgICBhcnJheU9mUGFyYW1PYmplY3RzOkFycmF5PFF1ZXJ5U3RyaW5nT2JqZWN0PiA9IFtdO1xuXG4gICAgaWYocXVlcnlTdHJpbmcuY2hhckF0KDApID09PSAnPycpIHtcbiAgICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcuc3Vic3RyKDEpO1xuICAgIH1cblxuICAgIGFycmF5T2ZQYXJhbVN0cmluZ3MgPSBxdWVyeVN0cmluZy5zcGxpdCgnJicpLmZpbHRlcihwYXJhbVN0cmluZyA9PiBwYXJhbVN0cmluZy5sZW5ndGggPiAwKTtcbiAgICBhcnJheU9mUGFyYW1PYmplY3RzID0gYXJyYXlPZlBhcmFtU3RyaW5ncy5tYXAocGFyYW1TdHJpbmcgPT4ge1xuXG4gICAgICBsZXQgcGFyYW1TdHJpbmdzOkFycmF5PHN0cmluZz4gPSBbXSxcbiAgICAgIHBhcmFtT2JqZWN0OntrZXk6c3RyaW5nLCB2YWx1ZTpzdHJpbmd9ID0geyBrZXk6JycsIHZhbHVlOicnIH07XG5cbiAgICAgIHBhcmFtU3RyaW5ncyA9IHBhcmFtU3RyaW5nLnNwbGl0KCc9Jyk7XG4gICAgICBwYXJhbU9iamVjdC5rZXkgPSBwYXJhbVN0cmluZ3NbMF07XG4gICAgICBwYXJhbU9iamVjdC52YWx1ZSA9IHBhcmFtU3RyaW5nc1sxXSB8fCAnJztcbiAgICAgIHJldHVybiBwYXJhbU9iamVjdDtcbiAgICB9KTtcblxuICAgIHJldHVybiBhcnJheU9mUGFyYW1PYmplY3RzO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVlcnlTdHJpbmdQYXJzZXI7IiwiaW1wb3J0IFF1ZXJ5U3RyaW5nUGFyc2VyIGZyb20gJy4vUXVlcnlTdHJpbmdQYXJzZXInO1xuaW1wb3J0IHsgUXVlcnlTdHJpbmdPYmplY3QsIFF1ZXJ5U3RyaW5nUGFyYW1Db25maWcgfSBmcm9tICcuL2NvbnRyYWN0cyc7XG5cbmNsYXNzIFF1ZXJ5U3RyaW5nQnVpbGRlciB7XG5cbiAgcHJpdmF0ZSBxdWVyeU9iamVjdHM6QXJyYXk8UXVlcnlTdHJpbmdPYmplY3Q+O1xuICBwcml2YXRlIGJ1aWx0UXVlcnlTdHJpbmc6c3RyaW5nO1xuICBwcml2YXRlIGNvbmZpZ3M6QXJyYXk8UXVlcnlTdHJpbmdQYXJhbUNvbmZpZz47XG4gIHByaXZhdGUgb3ZlcnJpZGVRdWVyeVN0cmluZzpzdHJpbmc7XG4gIHByaXZhdGUgb3ZlcnJpZGVRdWVyeU9iamVjdHM6QXJyYXk8UXVlcnlTdHJpbmdPYmplY3Q+O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnF1ZXJ5T2JqZWN0cyA9IFtdO1xuICAgIHRoaXMuYnVpbHRRdWVyeVN0cmluZyA9ICcnO1xuICAgIHRoaXMuY29uZmlncyA9IFtdO1xuICAgIHRoaXMub3ZlcnJpZGVRdWVyeVN0cmluZyA9ICcnXG4gICAgdGhpcy5vdmVycmlkZVF1ZXJ5T2JqZWN0cyA9IFtdO1xuICB9XG5cbiAgcHVibGljIHdpdGhDb25maWcoY29uZmlnczpBcnJheTxRdWVyeVN0cmluZ1BhcmFtQ29uZmlnPikge1xuICAgIHRoaXMuY29uZmlncyA9IGNvbmZpZ3M7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgd2l0aE92ZXJyaWRlcyhvdmVycmlkZVF1ZXJ5U3RyaW5nOnN0cmluZykge1xuICAgIHRoaXMub3ZlcnJpZGVRdWVyeVN0cmluZyA9IG92ZXJyaWRlUXVlcnlTdHJpbmc7XG4gICAgdGhpcy5vdmVycmlkZVF1ZXJ5T2JqZWN0cyA9IFF1ZXJ5U3RyaW5nUGFyc2VyLmdldFF1ZXJ5T2JqZWN0KG92ZXJyaWRlUXVlcnlTdHJpbmcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIGdldFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsdFF1ZXJ5U3RyaW5nO1xuICB9XG5cbiAgcHVibGljIGdldE9iamVjdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlPYmplY3RzO1xuICB9XG5cbiAgcHVibGljIGJ1aWxkKCkge1xuXG4gICAgdGhpcy5xdWVyeU9iamVjdHMgPSB0aGlzLmNvbmZpZ3MubWFwKGNvbmZpZyA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVRdWVyeU9iamVjdChjb25maWcpO1xuICAgIH0pLmZpbHRlcihxdWVyeU9iamVjdCA9PiBxdWVyeU9iamVjdCk7XG5cbiAgICB0aGlzLmJ1aWx0UXVlcnlTdHJpbmcgPSB0aGlzLmNyZWF0ZVF1ZXJ5U3RyaW5nKHRoaXMucXVlcnlPYmplY3RzKTtcblxuICAgIHJldHVybiB0aGlzO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUXVlcnlTdHJpbmcocXVlcnlPYmplY3RzOkFycmF5PFF1ZXJ5U3RyaW5nT2JqZWN0Pikge1xuXG4gICAgbGV0IHF1ZXJ5U3RyaW5nID0gJyc7XG4gICAgXG4gICAgcXVlcnlTdHJpbmcgPSBxdWVyeU9iamVjdHMucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgaWYoIWN1ci52YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWNjICsgYCR7Y3VyLmtleX0mYDtcbiAgICAgIH1cblx0XHRcdHJldHVybiBhY2MgKyBgJHtjdXIua2V5fT0ke2N1ci52YWx1ZX0mYDtcblx0XHR9LCAnPycpO1xuICAgIFxuICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcuc2xpY2UoMCwgLTEpO1xuXG5cdFx0cmV0dXJuIHF1ZXJ5U3RyaW5nO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVF1ZXJ5T2JqZWN0KGNvbmZpZzpRdWVyeVN0cmluZ1BhcmFtQ29uZmlnKSB7XG5cbiAgICBsZXQgb21pdEtleVdpdGhGYWxzeVZhbHVlID0geyBwcmltYXJ5OiB0cnVlLCBkZWZhdWx0OiBmYWxzZSB9O1xuICAgIGlmKHR5cGVvZiBjb25maWcub21pdEtleVdpdGhGYWxzeVZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIG9taXRLZXlXaXRoRmFsc3lWYWx1ZS5wcmltYXJ5ID0gY29uZmlnLm9taXRLZXlXaXRoRmFsc3lWYWx1ZTtcbiAgICAgIG9taXRLZXlXaXRoRmFsc3lWYWx1ZS5kZWZhdWx0ID0gY29uZmlnLm9taXRLZXlXaXRoRmFsc3lWYWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBvbWl0S2V5V2l0aEZhbHN5VmFsdWUgPSBPYmplY3QuYXNzaWduKG9taXRLZXlXaXRoRmFsc3lWYWx1ZSwgY29uZmlnLm9taXRLZXlXaXRoRmFsc3lWYWx1ZSk7XG4gICAgfVxuXG4gICAgbGV0IHJlZ2V4ID0gY29uZmlnLm92ZXJyaWRlU2VhcmNoIHx8IG51bGwsXG5cdFx0XHRcdHBhcmFtTmFtZSA9IGNvbmZpZy5wYXJhbU5hbWUsXG4gICAgICAgIHByaW1hcnlWYWx1ZSA9IGNvbmZpZy5wcmltYXJ5VmFsdWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IGNvbmZpZy5kZWZhdWx0VmFsdWUsXG5cdFx0XHRcdHVybE92ZXJyaWRlID0gZmFsc2UsXG5cdFx0XHRcdHBhcmFtID0ge1xuXHRcdFx0XHRcdGtleTogZW5jb2RlVVJJKHBhcmFtTmFtZS50cmltKCkpLFxuICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgfTtcblxuXHRcdGlmKHJlZ2V4KSB7XG5cdFx0XHR0aGlzLm92ZXJyaWRlUXVlcnlPYmplY3RzLmZvckVhY2gocXVlcnlPYmplY3QgPT4ge1xuXHRcdFx0XHRpZihxdWVyeU9iamVjdC5rZXkubWF0Y2gocmVnZXgpKSB7XG5cdFx0XHRcdFx0cGFyYW0udmFsdWUgPSBxdWVyeU9iamVjdC52YWx1ZTtcblx0XHRcdFx0XHR1cmxPdmVycmlkZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuICAgIH1cblxuXHRcdGlmKCF1cmxPdmVycmlkZSkge1xuICAgICAgaWYob21pdEtleVdpdGhGYWxzeVZhbHVlLnByaW1hcnkgJiYgdGhpcy5pc0ZhbHN5KHByaW1hcnlWYWx1ZSkpIHtcbiAgICAgICAgcHJpbWFyeVZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcHJpbWFyeVZhbHVlID0gdHlwZW9mIHByaW1hcnlWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyBTdHJpbmcocHJpbWFyeVZhbHVlKSA6ICcnO1xuICAgICAgICBwYXJhbS52YWx1ZSA9IGVuY29kZVVSSShwcmltYXJ5VmFsdWUudHJpbSgpKTtcbiAgICAgICAgcHJpbWFyeVZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cblx0XHR9XG5cblx0XHRpZighdXJsT3ZlcnJpZGUgJiYgIXByaW1hcnlWYWx1ZSkge1xuICAgICAgaWYob21pdEtleVdpdGhGYWxzeVZhbHVlLmRlZmF1bHQgJiYgdGhpcy5pc0ZhbHN5KGRlZmF1bHRWYWx1ZSkpIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gdHlwZW9mIGRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyBTdHJpbmcoZGVmYXVsdFZhbHVlKSA6ICcnO1xuICAgICAgICBwYXJhbS52YWx1ZSA9IGVuY29kZVVSSShkZWZhdWx0VmFsdWUudHJpbSgpKTtcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cblx0XHR9XG5cblx0XHRpZih1cmxPdmVycmlkZSB8fCBwcmltYXJ5VmFsdWUgfHwgZGVmYXVsdFZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gcGFyYW07XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIGlzRmFsc3kodmFsdWU6c3RyaW5nfG51bWJlcnxib29sZWFuKSB7XG4gICAgaWYoXG4gICAgICB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGwgfHwgXG4gICAgICB2YWx1ZSA9PT0gMCB8fCB2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09ICcnIHx8XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cblxuY2xhc3MgUXVlcnlTdHJpbmdpZmllciB7XG5cbiAgcHJpdmF0ZSBxdWVyeU9iamVjdHM6QXJyYXk8UXVlcnlTdHJpbmdPYmplY3Q+O1xuICBwcml2YXRlIGJ1aWx0UXVlcnlTdHJpbmc6c3RyaW5nO1xuICBwcml2YXRlIGNvbmZpZ3M6QXJyYXk8UXVlcnlTdHJpbmdQYXJhbUNvbmZpZz47XG4gIHByaXZhdGUgb3ZlcnJpZGVRdWVyeVN0cmluZzpzdHJpbmc7XG4gIHByaXZhdGUgb3ZlcnJpZGVRdWVyeU9iamVjdHM6QXJyYXk8UXVlcnlTdHJpbmdPYmplY3Q+O1xuXG4gIHN0YXRpYyBjcmVhdGVCdWlsZGVyKCkge1xuICAgIHJldHVybiBuZXcgUXVlcnlTdHJpbmdCdWlsZGVyKCk7XG4gIH1cblxufVxuXG5leHBvcnQgeyBRdWVyeVN0cmluZ0J1aWxkZXIsIFF1ZXJ5U3RyaW5naWZpZXIgfTsiLCJpbXBvcnQgUXVlcnlTdHJpbmdQYXJzZXIgZnJvbSAnLi9RdWVyeVN0cmluZ1BhcnNlcic7XG5leHBvcnQgeyBRdWVyeVN0cmluZ1BhcnNlciB9O1xuXG5pbXBvcnQgeyBRdWVyeVN0cmluZ0J1aWxkZXIsIFF1ZXJ5U3RyaW5naWZpZXJ9IGZyb20gJy4vUXVlcnlTdHJpbmdCdWlsZGVyJztcbmV4cG9ydCB7IFF1ZXJ5U3RyaW5nQnVpbGRlciwgUXVlcnlTdHJpbmdpZmllciB9OyJdLCJzb3VyY2VSb290IjoiIn0=